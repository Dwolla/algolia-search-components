{"version":3,"file":"index.js","sources":["../src/templates.tsx","../src/AlgoliaAutocomplete.tsx","../src/utils/debouncePromise.ts","../src/utils/computeIndexName.ts"],"sourcesContent":["import type { AutocompleteComponents, VNode } from \"@algolia/autocomplete-js\";\nimport type { Hit } from \"@algolia/client-search\";\nimport type { AlgoliaRecord } from \"./types\";\n\nexport const TEMPLATES = {\n  item: (hit: AlgoliaRecord, components: AutocompleteComponents): JSX.Element => {\n    return (\n      <a href={hit.url}>\n        <div className=\"aa-ItemContent\">\n          <div className=\"aa-ItemIcon\">\n            <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\">\n              <path\n                d=\"M17 6v12c0 .52-.2 1-1 1H4c-.7 0-1-.33-1-1V2c0-.55.42-1 1-1h8l5 5zM14 8h-3.13c-.51 0-.87-.34-.87-.87V4\"\n                stroke=\"currentColor\"\n                fill=\"none\"\n                fillRule=\"evenodd\"\n                strokeLinejoin=\"round\"\n              />\n            </svg>\n          </div>\n          <div>\n            <div className=\"aa-ItemTitle\">\n              {hit.hierarchy?.lvl0 ?? <components.Highlight hit={hit} attribute=\"title\" />}\n            </div>\n            {hit.hierarchy && <div className=\"aa-ItemHierarchy\">{hierarchyToBreadcrumbs(hit, components)}</div>}\n            <div className=\"aa-ItemDescription\">{getSuggestionSnippet(hit, components)}</div>\n          </div>\n        </div>\n      </a>\n    );\n  },\n\n  poweredBy: (): VNode => {\n    return (\n      <div className=\"aa-powered-by\">\n        Search by\n        <a href=\"https://www.algolia.com/\" className=\"aa-powered-by-link\">\n          Algolia\n        </a>\n      </div>\n    );\n  }\n};\n\n/**\n * Transform a highlighted hierarchy object into an array of Highlighted elements.\n * 3 levels max are returned.\n *\n * @param hit - A record with a hierarchy field ( { lvl0: string, lvl1: string, lvl2: string, ... } ).\n * @param components - Autocomplete components.\n * @returns An array of JSX.Elements | string, representing of the highlighted hierarchy starting from lvl1.\n *          Between each element, we insert a ' > ' character to render them as breadcrumbs eventually.\n */\nfunction hierarchyToBreadcrumbs(\n  hit: Hit<AlgoliaRecord>,\n  components: AutocompleteComponents\n): Array<JSX.Element | string> {\n  const breadcrumbArray: Array<JSX.Element | string> = [];\n  let addedLevels = 0;\n  if (!hit.hierarchy) {\n    return breadcrumbArray;\n  }\n  for (let i = 1; i < 7 && addedLevels < 3; ++i) {\n    const lvl = `lvl${i}`;\n    if (hit.hierarchy[lvl] && hit.hierarchy[lvl].length > 0) {\n      if (addedLevels > 0) {\n        breadcrumbArray.push(\" > \");\n      }\n      breadcrumbArray.push(<components.Highlight hit={hit.hierarchy} attribute={lvl} />);\n      ++addedLevels;\n    }\n  }\n  return breadcrumbArray;\n}\n\nfunction getSuggestionSnippet(hit: Hit<AlgoliaRecord>, components: AutocompleteComponents): JSX.Element | string {\n  // If they are defined as `searchableAttributes`, 'description' and 'content' are always\n  // present in the `_snippetResult`, even if they don't match.\n  // So we need to have 1 check on the presence and 1 check on the match\n  const description = hit._snippetResult?.description;\n  const content = hit._snippetResult?.content;\n\n  // Take in priority props that matches the search\n  if (description && description.matchLevel === \"full\") {\n    return <components.Snippet hit={hit} attribute=\"description\" />;\n  }\n  if (content && content.matchLevel === \"full\") {\n    return <components.Snippet hit={hit} attribute=\"content\" />;\n  }\n\n  // Otherwise take the prop that was at least correctly returned\n  if (description && !content) {\n    return <components.Snippet hit={hit} attribute=\"description\" />;\n  }\n  if (content) {\n    return <components.Snippet hit={hit} attribute=\"content\" />;\n  }\n\n  // Otherwise raw value or empty\n  return hit.description || hit.content || \"\";\n}\n","import type { AutocompleteOptions, AutocompleteSource, SourceTemplates } from \"@algolia/autocomplete-js\";\nimport { autocomplete, getAlgoliaResults } from \"@algolia/autocomplete-js\";\nimport type { HighlightedHit } from \"@algolia/autocomplete-preset-algolia\";\nimport type { SearchOptions } from \"@algolia/client-search\";\nimport type { SearchClient } from \"algoliasearch/lite\";\nimport type { FC } from \"react\";\nimport { createElement, Fragment, useEffect, useRef } from \"react\";\nimport type { Root } from \"react-dom/client\";\nimport { createRoot } from \"react-dom/client\";\nimport type { AlgoliaRecord } from \"./types\";\nimport { TEMPLATES } from \"./templates\";\nimport computeIndexName from \"./utils/computeIndexName\";\nimport debouncePromise from \"./utils/debouncePromise\";\n\nimport \"./index.scss\";\n\nexport interface AlgoliaAutocompleteProps extends Partial<AutocompleteOptions<AlgoliaRecord>> {\n  branch: string;\n  debounceTimeout?: number;\n  searchClient: SearchClient;\n  searchOptions?: SearchOptions;\n  siteId: string;\n}\n\ntype AlgoliaSource = AutocompleteSource<HighlightedHit<AlgoliaRecord>>;\n\nconst getSources = (\n  searchClient: SearchClient,\n  indexName: string,\n  params?: SearchOptions,\n  debounceTimeout?: number\n): Promise<AlgoliaSource> => {\n  const templates: SourceTemplates<HighlightedHit<AlgoliaRecord>> = {\n    header: () => \"\",\n    item: ({ item, components }) => TEMPLATES.item(item, components),\n    footer: () => TEMPLATES.poweredBy()\n  };\n\n  return tryDebounce(\n    {\n      sourceId: \"algoliaHits\",\n      getItems: ({ query }) => {\n        return getAlgoliaResults({\n          searchClient,\n          queries: [{ indexName, query, params }]\n        });\n      },\n      getItemUrl: ({ item }) => item.url,\n      templates\n    },\n    debounceTimeout\n  );\n};\n\nconst tryDebounce = async (items: AlgoliaSource, time?: number): Promise<AlgoliaSource> =>\n  new Promise<AlgoliaSource>((resolve) =>\n    time ? debouncePromise((items) => resolve(items), time)(items) : resolve(items)\n  );\n\nconst AlgoliaAutocomplete: FC<AlgoliaAutocompleteProps> = (props) => {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const panelRootRef = useRef<Root | null>(null);\n  const rootRef = useRef<HTMLElement | null>(null);\n\n  useEffect(() => {\n    if (!containerRef.current) return undefined;\n\n    const search = autocomplete<AlgoliaRecord>({\n      autoFocus: false,\n      container: containerRef.current,\n      getSources: async () => [\n        await getSources(\n          props.searchClient,\n          computeIndexName(props.branch, props.siteId),\n          props.searchOptions,\n          props.debounceTimeout\n        )\n      ],\n      panelPlacement: \"input-wrapper-width\",\n      placeholder: \"Search...\",\n      render: ({ children }, root) => {\n        if (!panelRootRef.current || rootRef.current !== root) {\n          rootRef.current = root;\n\n          panelRootRef.current?.unmount();\n          panelRootRef.current = createRoot(root);\n        }\n        panelRootRef.current?.render(children);\n      },\n      renderer: {\n        createElement,\n        Fragment,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        render: () => {}\n      },\n      ...props\n    });\n\n    return () => search?.destroy();\n  }, [props]);\n\n  return <div ref={containerRef} />;\n};\n\nexport default AlgoliaAutocomplete;\n","export default function <A extends any[], R>(fn: (...args: A) => R, time: number) {\n  let timerId: NodeJS.Timeout | undefined;\n\n  return function (...args: A) {\n    if (timerId) clearTimeout(timerId);\n\n    return new Promise((resolve) => {\n      timerId = setTimeout(() => resolve(fn(...args)), time);\n    });\n  };\n}\n","export default function (branch: string, siteId: string): string {\n  // Keep in sync with crawler code in /netlify/crawl\n  const cleanBranch = branch\n    .trim()\n    .replace(/[^\\p{L}\\p{N}_.-]+/gu, \"-\")\n    .replace(/-{2,}/g, \"-\")\n    .toLocaleLowerCase();\n  return `netlify_${siteId}_${cleanBranch}_all`;\n}\n"],"names":["TEMPLATES","hit","components","_jsx","Object","assign","href","url","children","_jsxs","jsxs","className","width","height","viewBox","d","stroke","fill","fillRule","strokeLinejoin","_b","_a","hierarchy","lvl0","jsx","Highlight","attribute","hierarchyToBreadcrumbs","getSuggestionSnippet","breadcrumbArray","addedLevels","i","lvl","length","push","description","_snippetResult","content","matchLevel","Snippet","tryDebounce","items","time","__awaiter","Promise","resolve","fn","timerId","args","clearTimeout","setTimeout","debouncePromise","props","containerRef","useRef","panelRootRef","rootRef","useEffect","current","search","autocomplete","autoFocus","container","getSources","searchClient","branch","siteId","indexName","trim","replace","toLocaleLowerCase","params","searchOptions","debounceTimeout","sourceId","getItems","query","getAlgoliaResults","queries","getItemUrl","item","templates","header","footer","panelPlacement","placeholder","render","root","unmount","createRoot","renderer","createElement","Fragment","destroy","ref"],"mappings":"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"}